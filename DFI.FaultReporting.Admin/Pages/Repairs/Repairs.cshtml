@page
@using DFI.FaultReporting.Common.SessionStorage
@using DFI.FaultReporting.Models.FaultReports
@using DFI.FaultReporting.Models.Admin
@model DFI.FaultReporting.Admin.Pages.Repairs.RepairsModel
@{
    ViewData["Title"] = "Repairs";
}

<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="description" content="Fault Reporting repairs">
<meta name="theme-color" content="#142062" />

<body onload="initSearch()">
    <div class="container">
        <h1>@ViewData["Title"]</h1>
        <br />
        <h2>View scheduled repairs</h2>
        <hr />
        <div class="row">
            <div class="col-md-12">
                <form name="filterForm" id="filterForm" asp-page-handler="Filter" method="post">
                    <div class="row">
                        <div class="col-md-4">
                            <div class="form-floating mb-3" hidden>
                                <input asp-for="SearchID" id="searchID" name="searchID" class="form-control" />
                                <label asp-for="SearchID" for="searchID" class="control-label"></label>
                            </div>
                            <div class="autocomplete-page">
                                <div class="form-floating mb-3">
                                    <input asp-for="SearchString" id="searchBox" autocomplete="off" class="form-control" />
                                    <label asp-for="SearchString" for="searchBox" class="form-label"></label>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-floating mb-3">
                                <select asp-for="RepairStatusFilter" class="form-select" asp-items="Model.RepairStatusList" onchange="this.form.submit()">
                                    <option value="0">
                                        All (not repaired)
                                    </option>
                                </select>
                                <label asp-for="RepairStatusFilter" class="form-label"></label>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-floating mb-3">
                                <select asp-for="TargetMetFilter" class="form-select" onchange="this.form.submit()">
                                    <option value="0">
                                        All
                                    </option>
                                    <option value="1">
                                        Target met
                                    </option>
                                    <option value="2">
                                        Target not met
                                    </option>
                                </select>
                                <label asp-for="TargetMetFilter" class="form-label"></label>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
        </div>
        <div class="row">
            <div class="col-md-12">
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>
                                    Repair details
                                </th>
                                <th>
                                    Fault details
                                </th>
                                <th>
                                    Input details
                                </th>
                                <th class="text-center">
                                    View photos
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var repair in Model.PagedRepairs)
                            {
                                <tr>
                                    <td>
                                        <strong>Assigned contractor:</strong>
                                        <br />
                                        @foreach (var contractor in Model.Contractors)
                                        {
                                            if (contractor.ID == repair.ContractorID)
                                            {
                                                @contractor.ContractorName
                                            }
                                        }
                                        <br />
                                        @foreach (var contractor in Model.Contractors)
                                        {
                                            if (contractor.ID == repair.ContractorID)
                                            {
                                                @contractor.Email
                                            }
                                        }
                                        <br />
                                        <br />
                                        <strong>Status:</strong>
                                        <br />
                                        @Model.RepairStatuses.FirstOrDefault(rs => rs.ID == repair.RepairStatusID).RepairStatusDescription
                                        <br />
                                        <br />
                                        <strong>Target date</strong>
                                        <br />
                                        @repair.RepairTargetDate.ToShortDateString()
                                        <br />
                                        <br />
                                        @if (repair.RepairStatusID == 3)
                                        {
                                            <strong>Date repaired:</strong>
                                            <br />
                                            @Convert.ToDateTime(repair.ActualRepairDate).ToShortDateString()
                                            <br />
                                            <br />
                                            @if (repair.ActualRepairDate <= repair.RepairTargetDate)
                                            {
                                                <span class="badge bg-success">Target met</span>
                                            }
                                            else
                                            {
                                                <span class="badge bg-danger">Target not met</span>
                                            }
                                            <br />
                                            <br />

                                        }
                                        @if (repair.RepairNotes != null && repair.RepairNotes != string.Empty)
                                        {
                                            <strong>Notes:</strong>
                                            <br />
                                            @repair.RepairNotes
                                        }
                                    </td>
                                    <td>
                                        @foreach (var fault in Model.Faults)
                                        {
                                            @if (fault.ID == repair.FaultID)
                                            {
                                                <strong>Type:</strong>
                                                <br />
                                                @foreach (var faultType in Model.FaultTypes)
                                                {
                                                    if (fault.FaultTypeID == faultType.ID)
                                                    {
                                                        @faultType.FaultTypeDescription
                                                    }
                                                }
                                                <br />
                                                <br />
                                                <strong>Status:</strong>
                                                <br />
                                                @foreach (var faultStatus in Model.FaultStatuses)
                                                {
                                                    if (fault.FaultStatusID == faultStatus.ID)
                                                    {
                                                        @faultStatus.FaultStatusDescription
                                                    }
                                                }
                                                <br />
                                                <br />
                                                <strong>Priority:</strong>
                                                <br />
                                                @foreach (var faultPriority in Model.FaultPriorities)
                                                {
                                                    if (fault.FaultPriorityID == faultPriority.ID)
                                                    {
                                                        @faultPriority.FaultPriorityRating
                                                    }
                                                }
                                                <br />
                                                @Model.FaultPriorities.FirstOrDefault(fp => fp.ID == fault.FaultPriorityID).FaultPriorityDescription
                                                <br />
                                                <br />
                                                <strong>Location:</strong>
                                                <br />
                                                @if (fault.RoadNumber != "undefined" && fault.RoadNumber != null)
                                                {
                                                    @fault.RoadNumber
                                                    <br />
                                                }
                                                @if (fault.RoadName != "undefined" && fault.RoadName != null)
                                                {
                                                    @fault.RoadName
                                                    <br />
                                                }
                                                @if (fault.RoadTown != "undefined" && fault.RoadTown != null)
                                                {
                                                    @fault.RoadTown
                                                    <br />
                                                }
                                                @if (fault.RoadCounty != "undefined" && fault.RoadCounty != null)
                                                {
                                                    @fault.RoadCounty
                                                }
                                            }
                                        }
                                    </td>
                                    <td>
                                        <strong>Input:</strong>
                                        <br />
                                        @Html.DisplayFor(modelItem => repair.InputBy)
                                        <br />
                                        @Html.DisplayFor(modelItem => repair.InputOn)
                                    </td>
                                    <td class="text-center">
                                        <a asp-page="./RepairImages" asp-route-id="@repair.ID" class="btn btn-outline-primary btn-lg"><i class="fa-solid fa-magnifying-glass-plus"></i></a>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
                @{
                    var prevDisabled = !Model.Pager.HasPreviousPage ? "disabled" : "";
                    var nextDisabled = !Model.Pager.HasNextPage ? "disabled" : "";
                }
                <div>
                    <ul class="pagination text-center">
                        <li>
                            <a asp-page-handler="Paging" asp-route-CurrentPage="1"
                               class="btn btn-outline-primary btn-sm @prevDisabled"
                               aria-label="First page button" style="font-size: 1em !important;">
                                <span class="fa fa-chevron-left"></span><span class="fa fa-chevron-left"></span> First
                            </a>&nbsp;
                        </li>
                        <li>
                            <a asp-page-handler="Paging" asp-route-CurrentPage="@(Model.Pager.CurrentPage -1)"
                               class="btn btn-outline-primary btn-sm @prevDisabled"
                               aria-label="Previous page button" style="font-size: 1em !important;">
                                <span class="fa fa-chevron-left"></span> Prev
                            </a>
                        </li>
                        <li>
                            &nbsp; Page @(Model.Pager.CurrentPage) of @(Model.Pager.TotalPages == 0 ? 1 : Model.Pager.TotalPages)  &nbsp;
                        </li>
                        <li>
                            <a asp-page-handler="Paging" asp-route-CurrentPage="@(Model.Pager.CurrentPage + 1)"
                               class="btn btn-outline-primary btn-sm @nextDisabled"
                               aria-label="Next page button"
                               style="font-size: 1em !important;">
                                Next <span class="fa fa-chevron-right"></span>
                            </a>&nbsp;
                        </li>
                        <li>
                            <a asp-page-handler="Paging" asp-route-CurrentPage="@Model.Pager.TotalPages"
                               class="btn btn-outline-primary btn-sm @nextDisabled" aria-label="Last page button"
                               style="font-size: 1em !important;">
                                Last <span class="fa fa-chevron-right"></span><span class="fa fa-chevron-right"></span>
                            </a>
                        </li>
                    </ul>
                </div>
            </div>
        </div>
        <br />
        <div class="row">
            <div class="col-md-12 text-center">
                <div class="small-tile">
                    <a class="nav-link" aria-label="Repairs reporting link" title="Repairs reporting" asp-page="/Repairs/Reports/RepairsDataReport"><i class="fa-solid fa-magnifying-glass-chart"></i> Reporting</a>
                </div>
            </div>
        </div>
    </div>
</body>

<script type="text/javascript">

    if (window.history.replaceState) {
        window.history.replaceState(null, null, window.location.href);
    }

    //FUNCTION SUMMARY:
    //This function initialises the search functionality to enable users to search for a contractor.
    function initSearch() {
        //Find search box on page.
        var searchBox = document.getElementById('searchBox');

        if (searchBox != null) {
            //Add event for when user begins to input text.
            searchBox.addEventListener('input', search);
        }
    }

    //FUNCTION SUMMARY:
    //This function is used to search for a contractor based on the user input in the search box.
    //This function is executed when the user begins to type in the search box.
    function search() {

        //Get the user input from the search box.
        var query = document.getElementById('searchBox').value;

        //Get contractors from session.
        var contractors = @Json.Serialize(HttpContext.Session.GetFromSession<List<Contractor>>("Contractors"));

        //If the search box is empty, submit the form.
        if (!query) {
            document.getElementById("filterForm").submit();
        }
        else {
            //Search for contractors based on the user input.
            autoCompleteSearch(document.getElementById("searchBox"), contractors);
        }
    }


    //FUNCTION SUMMARY:
    //This function is used to create an autocomplete list of contractors based on the user input.
    function autoCompleteSearch(searchControl, contractors) {
        //Declare variable to store the index of the item the user is currently focused on.
        var focusItem;

        //Add input event to detct when user begins to type in search box.
        searchControl.addEventListener("input", function (e) {
            //Declare variables to store the search and create elements to display the search results.
            var outerDiv, innerDiv, i, searchValue = searchControl.value;

            //Close any previous search results.
            closePrevSearchResults();

            //If the search box is empty, return false.
            if (!searchValue) { return false; }
            focusItem = -1;

            //Create outer div element to contain the search results.
            outerDiv = document.createElement("DIV");
            outerDiv.setAttribute("id", searchControl.id + "autocomplete-list");
            outerDiv.setAttribute("class", "autocomplete-items");

            //Append the outer div to the parent node of the search control.
            this.parentNode.appendChild(outerDiv);

            //Loop through the contractors.
            contractors.forEach(function (contractor) {

                //If the contractor name starts with the user input.
                if (contractor.contractorName.substr(0, searchValue.length).toUpperCase() == searchValue.toUpperCase()) {

                    //Create inner div element to display each search result.
                    innerDiv = document.createElement("DIV");
                    //Make the characters in the search result bold that match the user input.
                    innerDiv.innerHTML = "<strong>" + contractor.contractorName.substr(0, searchValue.length) + "</strong>";
                    innerDiv.innerHTML += contractor.contractorName.substr(searchValue.length);
                    //Add hidden input field to store the contractor name.
                    innerDiv.innerHTML += "<input type='hidden' value='" + contractor.contractorName + "'>";

                    //Add click event to set the search box value to the selected contractor name and submit the form.
                    innerDiv.addEventListener("click", function (e) {

                        //Set the search box value to the selected contractor name.
                        searchControl.value = this.getElementsByTagName("input")[0].value;

                        //Close any previous search results.
                        closePrevSearchResults();

                        document.getElementById("searchID").value = contractor.id;

                        //Submit the form.
                        document.getElementById("filterForm").submit();
                    });

                    //Append the inner div to the outer div.
                    outerDiv.appendChild(innerDiv);
                }
            });
        });

        //Add event listeners to detect when the user presses the arrow keys or enter key to navigate the search results.
        searchControl.addEventListener("keydown", function (e) {

            //Get the search results list control.
            var autocompleteList = document.getElementById(searchControl.id + "autocomplete-list");

            if (autocompleteList) autocompleteList = autocompleteList.getElementsByTagName("div");

            //If the arrow DOWN key is pressed.
            if (e.keyCode == 40) {
                //Increment the focusItem index.
                focusItem++;
                makeActive(autocompleteList);
            }
            //If the arrow UP key is pressed.
            else if (e.keyCode == 38) {
                //Decrement the focusItem index.
                focusItem--;
                makeActive(autocompleteList);
            }
            //If the ENTER key is pressed.
            else if (e.keyCode == 13) {
                //Prevent the form from being submitted.
                e.preventDefault();

                //If the focusItem index is greater than -1.
                if (focusItem > -1) {
                    //Execute the click event of the selected search result.
                    if (autocompleteList) autocompleteList[focusItem].click();
                }
            }
        });

        //FUNCTION SUMMARY:
        //This function is used to classify an item as "active" in the search results.
        function makeActive(searchItem) {

            //If no search results are returned, return false.
            if (!searchItem) return false;

            //Call the makeInactive function to remove the "active" class from all search results.
            makeInactive(searchItem);

            //If the focusItem index is greater than the number of search results, set the focusItem index to 0.
            if (focusItem >= searchItem.length) focusItem = 0;

            //If the focusItem index is less than 0, set the focusItem index to the number of search results.
            if (focusItem < 0) focusItem = (searchItem.length - 1);

            //Add the "active" class to the search result the user is currently focused.
            searchItem[focusItem].classList.add("autocomplete-active");
        }

        //FUNCTION SUMMARY:
        //This function is used to remove the "active" class from all search results.
        function makeInactive(searchItem) {

            //Loop through the search results and remove the "active" class.
            for (var i = 0; i < searchItem.length; i++) {
                searchItem[i].classList.remove("autocomplete-active");
            }
        }

        //FUNCTION SUMMARY:
        //This function is used to close any previous search results.
        function closePrevSearchResults(outerDivElement) {

            //Get the search results list control.
            var autocompleteList = document.getElementsByClassName("autocomplete-items");

            //Loop through the search results and remove the search results.
            for (var i = 0; i < autocompleteList.length; i++) {
                if (outerDivElement != autocompleteList[i] && outerDivElement != searchControl) {
                    autocompleteList[i].parentNode.removeChild(autocompleteList[i]);
                }
            }
        }

        //Add event listener to detect when the user clicks outside of the search results to close the search results.
        document.addEventListener("click", function (e) {
            closePrevSearchResults(e.target);
        });
    }
</script>