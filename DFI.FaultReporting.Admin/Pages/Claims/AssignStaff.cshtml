@page
@using DFI.FaultReporting.Common.SessionStorage
@using DFI.FaultReporting.Models.FaultReports
@using DFI.FaultReporting.Models.Admin
@using DFI.FaultReporting.Models.Users
@model DFI.FaultReporting.Admin.Pages.Claims.AssignStaffModel
@{
    ViewData["Title"] = "Assign staff";
}
<body onload="initSearch()">
    <div class="container">
        <h1>@ViewData["Title"]</h1>
        <br />
        <h2>Assign staff member to manage claim</h2>
        <hr />
        @if (Model.UpdateSuccess)
        {
            <div class="alert alert-success alert-dismissible">
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                <strong>Success: </strong>
                <p>Staff member has been successfully assigned to claim.</p>
            </div>
        }
        <div class="row">
            <div class="col-md-12">
                <form name="searchForm" id="searchForm" method="post" asp-page-handler="AssignToSearch">
                    <div class="form-floating mb-3" hidden>
                        <input asp-for="SearchID" id="searchID" name="searchID" class="form-control" />
                        <label asp-for="SearchID" for="searchID" class="control-label"></label>
                    </div>
                    <div class="row">
                        <div class="col-md-4">
                            <div class="autocomplete-page">
                                <div class="form-floating mb-3">
                                    <input asp-for="SearchString" id="searchBox" autocomplete="off" class="form-control" />
                                    <label asp-for="SearchString" for="searchBox" class="form-label"></label>
                                </div>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
        </div>
        <div class="row">
            <div class="col-md-12">
                <form name="assignToMeForm" id="assignToMeForm" method="post" asp-page-handler="AssignToMe">
                    <button id="btnAssignToMe" asp-page-handler="AssignToMe" type="submit" class="btn btn-outline-primary btn-lg"><i class="fa-solid fa-user-plus"></i> Assign to me</button>
                </form>
            </div>
        </div>
        <br />
        <div class="row">
            <div class="col-md-4">
                <form name="assignedStaffForm" id="assignedStaffForm" method="post" asp-page-handler="AssignStaff">
                    <div class="form-floating mb-3" hidden>
                        <input asp-for="StaffToAssign.ID" class="form-control" disabled />
                        <label asp-for="StaffToAssign.ID" class="control-label"></label>
                        <span asp-validation-for="StaffToAssign.ID" class="text-danger"></span>
                    </div>
                    <div class="form-floating mb-3">
                        <input asp-for="StaffToAssign.Email" class="form-control" disabled />
                        <label asp-for="StaffToAssign.Email" class="control-label"></label>
                        <span asp-validation-for="StaffToAssign.Email" class="text-danger"></span>
                    </div>
                    <div class="form-floating mb-3">
                        <input asp-for="StaffToAssign.Prefix" class="form-control" disabled />
                        <label asp-for="StaffToAssign.Prefix" class="control-label"></label>
                        <span asp-validation-for="StaffToAssign.Prefix" class="text-danger"></span>
                    </div>
                    <div class="form-floating mb-3">
                        <input asp-for="StaffToAssign.FirstName" class="form-control" disabled />
                        <label asp-for="StaffToAssign.FirstName" class="control-label"></label>
                        <span asp-validation-for="StaffToAssign.FirstName" class="text-danger"></span>
                    </div>
                    <div class="form-floating mb-3">
                        <input asp-for="StaffToAssign.LastName" class="form-control" disabled />
                        <label asp-for="StaffToAssign.LastName" class="control-label"></label>
                        <span asp-validation-for="StaffToAssign.LastName" class="text-danger"></span>
                    </div>
                    <div class="btn-group">
                        <a asp-page="./Claims" class="btn btn-lg btn-outline-secondary"><i class="fa-regular fa-circle-left"></i> Back</a>
                        &nbsp;
                        <button id="btnAssignStaff" asp-page-handler="AssignStaff" type="submit" class="btn btn-lg btn-outline-success"><i class="fa-regular fa-circle-check"></i> Assign</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
    <br />
    <br />
</body>

<script type="text/javascript">

    function initSearch() {
        // Find search box on page
        var searchBox = document.getElementById('searchBox');

        if (searchBox != null) {
            // Add event for when user begins to input text
            searchBox.addEventListener('input', search);
        }
    }


    function search() {
        var query = document.getElementById('searchBox').value;

        var staff = @Json.Serialize(HttpContext.Session.GetFromSession<List<Staff>>("Staff"));

        if (!query) {
            document.getElementById("searchForm").submit();
        }
        else {
            autocomplete(document.getElementById("searchBox"), staff);
        }
    }

    function autocomplete(inp, staff) {
        /*the autocomplete function takes two arguments,
        the text field element and an array of possible autocompleted values:*/
        var currentFocus;
        /*execute a function when someone writes in the text field:*/
        inp.addEventListener("input", function (e) {
            var a, b, i, val = this.value;
            /*close any already open lists of autocompleted values*/
            closeAllLists();
            if (!val) { return false; }
            currentFocus = -1;
            /*create a DIV element that will contain the items (values):*/
            a = document.createElement("DIV");
            a.setAttribute("id", this.id + "autocomplete-list");
            a.setAttribute("class", "autocomplete-items");
            /*append the DIV element as a child of the autocomplete container:*/
            this.parentNode.appendChild(a);
            /*for each item in the array...*/
            staff.forEach(function (staffmember) {
                if (staffmember.firstName.substr(0, val.length).toUpperCase() == val.toUpperCase() || staffmember.lastName.substr(0, val.length).toUpperCase() == val.toUpperCase()) {

                    /*create a DIV element for each matching element:*/
                    b = document.createElement("DIV");

                    /*make the matching letters bold:*/
                    b.innerHTML = "<strong>" + staffmember.firstName.substr(0, val.length) + "</strong>";
                    b.innerHTML += staffmember.firstName.substr(val.length) + " " + staffmember.lastName;
                    /*insert a input field that will hold the current array item's value:*/
                    b.innerHTML += "<input type='hidden' value='" + staffmember.firstName + " " + staffmember.lastName + "'>";


                    /*execute a function when someone clicks on the item value (DIV element):*/
                    b.addEventListener("click", function (e) {
                        /*insert the value for the autocomplete text field:*/
                        inp.value = this.getElementsByTagName("input")[0].value;
                        /*close the list of autocompleted values,
                        (or any other open lists of autocompleted values:*/
                        closeAllLists();

                        document.getElementById("searchID").value = staffmember.id;

                        document.getElementById("searchForm").submit();
                    });
                    a.appendChild(b);
                }
            });
        });
        /*execute a function presses a key on the keyboard:*/
        inp.addEventListener("keydown", function (e) {
            var x = document.getElementById(this.id + "autocomplete-list");
            if (x) x = x.getElementsByTagName("div");
            if (e.keyCode == 40) {
                /*If the arrow DOWN key is pressed,
                increase the currentFocus variable:*/
                currentFocus++;
                /*and and make the current item more visible:*/
                addActive(x);
            } else if (e.keyCode == 38) { //up
                /*If the arrow UP key is pressed,
                decrease the currentFocus variable:*/
                currentFocus--;
                /*and and make the current item more visible:*/
                addActive(x);
            } else if (e.keyCode == 13) {
                /*If the ENTER key is pressed, prevent the form from being submitted,*/
                e.preventDefault();
                if (currentFocus > -1) {
                    /*and simulate a click on the "active" item:*/
                    if (x) x[currentFocus].click();
                }
            }
        });
        function addActive(x) {
            /*a function to classify an item as "active":*/
            if (!x) return false;
            /*start by removing the "active" class on all items:*/
            removeActive(x);
            if (currentFocus >= x.length) currentFocus = 0;
            if (currentFocus < 0) currentFocus = (x.length - 1);
            /*add class "autocomplete-active":*/
            x[currentFocus].classList.add("autocomplete-active");
        }
        function removeActive(x) {
            /*a function to remove the "active" class from all autocomplete items:*/
            for (var i = 0; i < x.length; i++) {
                x[i].classList.remove("autocomplete-active");
            }
        }
        function closeAllLists(elmnt) {
            /*close all autocomplete lists in the document,
            except the one passed as an argument:*/
            var x = document.getElementsByClassName("autocomplete-items");
            for (var i = 0; i < x.length; i++) {
                if (elmnt != x[i] && elmnt != inp) {
                    x[i].parentNode.removeChild(x[i]);
                }
            }
        }
        /*execute a function when someone clicks in the document:*/
        document.addEventListener("click", function (e) {
            closeAllLists(e.target);
        });
    }
</script>