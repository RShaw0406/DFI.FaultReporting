@page
@using DFI.FaultReporting.Common.SessionStorage
@using DFI.FaultReporting.Models.FaultReports
@using DFI.FaultReporting.Models.Admin
@using DFI.FaultReporting.Models.Users
@model DFI.FaultReporting.Admin.Pages.Faults.AssignStaffModel
@{
    ViewData["Title"] = "Assign staff";
}

<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="description" content="Fault Reporting assign staff">
<meta name="theme-color" content="#142062" />

<body onload="initSearch()">
    <div class="container">
        <h1>@ViewData["Title"]</h1>
        <br />
        <h2>Assign staff member to manage fault</h2>
        <hr />
        @if (Model.UpdateSuccess)
        {
            <div class="alert alert-success alert-dismissible">
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                <strong>Success: </strong>
                <p>Staff member has been successfully assigned to fault.</p>
            </div>
        }
        <div class="row">
            <div class="col-md-12">
                <form name="searchForm" id="searchForm" method="post" asp-page-handler="AssignToSearch">
                    <div class="form-floating mb-3" hidden>
                        <input asp-for="SearchID" id="searchID" name="searchID" class="form-control" />
                        <label asp-for="SearchID" for="searchID" class="control-label"></label>
                    </div>
                    <div class="row">
                        <div class="col-md-4">
                            <div class="autocomplete-page">
                                <div class="form-floating mb-3">
                                    <input asp-for="SearchString" id="searchBox" autocomplete="off" class="form-control" />
                                    <label asp-for="SearchString" for="searchBox" class="form-label"></label>
                                </div>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
        </div>
        <div class="row">
            <div class="col-md-12">
                <form name="assignToMeForm" id="assignToMeForm" method="post" asp-page-handler="AssignToMe">
                    <button id="btnAssignToMe" asp-page-handler="AssignToMe" type="submit" class="btn btn-outline-primary btn-lg"><i class="fa-solid fa-user-plus"></i> Assign to me</button>
                </form>
            </div>
        </div>
        <br />
        <div class="row">
            <div class="col-md-4">
                <form name="assignedStaffForm" id="assignedStaffForm" method="post" asp-page-handler="AssignStaff">
                    <div class="form-floating mb-3" hidden>
                        <input asp-for="StaffToAssign.ID" class="form-control" disabled />
                        <label asp-for="StaffToAssign.ID" class="control-label"></label>
                        <span asp-validation-for="StaffToAssign.ID" class="text-danger"></span>
                    </div>
                    <div class="form-floating mb-3">
                        <input asp-for="StaffToAssign.Email" class="form-control" disabled />
                        <label asp-for="StaffToAssign.Email" class="control-label"></label>
                        <span asp-validation-for="StaffToAssign.Email" class="text-danger"></span>
                    </div>
                    <div class="form-floating mb-3">
                        <input asp-for="StaffToAssign.Prefix" class="form-control" disabled />
                        <label asp-for="StaffToAssign.Prefix" class="control-label"></label>
                        <span asp-validation-for="StaffToAssign.Prefix" class="text-danger"></span>
                    </div>
                    <div class="form-floating mb-3">
                        <input asp-for="StaffToAssign.FirstName" class="form-control" disabled />
                        <label asp-for="StaffToAssign.FirstName" class="control-label"></label>
                        <span asp-validation-for="StaffToAssign.FirstName" class="text-danger"></span>
                    </div>
                    <div class="form-floating mb-3">
                        <input asp-for="StaffToAssign.LastName" class="form-control" disabled />
                        <label asp-for="StaffToAssign.LastName" class="control-label"></label>
                        <span asp-validation-for="StaffToAssign.LastName" class="text-danger"></span>
                    </div>
                    <div class="btn-group">
                        <a asp-page="./Faults" class="btn btn-lg btn-outline-secondary"><i class="fa-regular fa-circle-left"></i> Back</a>
                        &nbsp;
                        <button id="btnAssignStaff" asp-page-handler="AssignStaff" type="submit" class="btn btn-lg btn-outline-success"><i class="fa-regular fa-circle-check"></i> Assign</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
    <br />
    <br />
</body>

<script type="text/javascript">

    // FUNCTION SUMMARY:
    // This method is used for setting up the autocomplete search box.
    function initSearch() {
        // Find search box on page
        var searchBox = document.getElementById('searchBox');

        if (searchBox != null) {
            // Add event for when user begins to input text
            searchBox.addEventListener('input', search);
        }
    }

    //FUNCTION SUMMARY:
    //This method is used for searching for staff members based on the input in the search box.
    function search() {

        //Get the value of the search box.
        var query = document.getElementById('searchBox').value;

        //Get the staff from session.
        var staff = @Json.Serialize(HttpContext.Session.GetFromSession<List<Staff>>("Staff"));

        //If the search box is empty, submit the form.
        if (!query) {
            document.getElementById("searchForm").submit();
        }
        else {
            //Create autocomplete list.
            autoCompleteSearch(document.getElementById("searchBox"), staff);
        }
    }

    //FUNCTION SUMMARY:
    //This function is used to create the autocomplete list based on the search results.
    function autoCompleteSearch(searchControl, staff) {

        //Declare variable to store the index of the item the user is currently focused on.
        var focusItem;

        //Add input event to detect when user begins to type in search box.
        searchControl.addEventListener("input", function (e) {

            //Declare variables to store the search and create elements to display the search results.
            var outerDiv, innerDiv, i, searchValue = this.value;

            //Close any previous search results.
            closePrevSearchResults();

            //If the search box is empty, return false.
            if (!searchValue) { return false; }
            currentFocus = -1;

            //Create outer div element to contain the search results.
            outerDiv = document.createElement("DIV");
            outerDiv.setAttribute("id", this.id + "autocomplete-list");
            outerDiv.setAttribute("class", "autocomplete-items");

            //Append the outer div to the parent node of the search control.
            this.parentNode.appendChild(outerDiv);

            //Loop over each of the staff members.
            staff.forEach(function (staffmember) {

                //If the first letters of the search value match the first letters of the staff member's first or last name.
                if (staffmember.firstName.substr(0, searchValue.length).toUpperCase() == searchValue.toUpperCase() || staffmember.lastName.substr(0, searchValue.length).toUpperCase() == searchValue.toUpperCase()) {

                    //Create inner div element to display each search result.
                    innerDiv = document.createElement("DIV");
                    //Make the characters in the search result bold that match the user input.
                    innerDiv.innerHTML = "<strong>" + staffmember.firstName.substr(0, searchValue.length) + "</strong>";
                    innerDiv.innerHTML += staffmember.firstName.substr(searchValue.length) + " " + staffmember.lastName;
                    //Add hidden input field to store the staff name.
                    innerDiv.innerHTML += "<input type='hidden' value='" + staffmember.firstName + " " + staffmember.lastName + "'>";


                    //Add click event to set the search box value to the selected staff name and submit the form.
                    innerDiv.addEventListener("click", function (e) {

                        //Set the search box value to the selected contractor name.
                        searchControl.value = this.getElementsByTagName("input")[0].value;

                        //Close any previous search results.
                        closePrevSearchResults();

                        document.getElementById("searchID").value = staffmember.id;

                        //Submit the form.
                        document.getElementById("searchForm").submit();
                    });

                    //Append the inner div to the outer div.
                    outerDiv.appendChild(innerDiv);
                }
            });
        });

        //Add event listeners to detect when the user presses the arrow keys or enter key to navigate the search results.
        searchControl.addEventListener("keydown", function (e) {

            //Get the search results list control.
            var autocompleteList = document.getElementById(searchControl.id + "autocomplete-list");

            if (autocompleteList) autocompleteList = autocompleteList.getElementsByTagName("div");

            //If the arrow DOWN key is pressed.
            if (e.keyCode == 40) {
                //Increment the focusItem index.
                focusItem++;
                makeActive(autocompleteList);
            }
            //If the arrow UP key is pressed.
            else if (e.keyCode == 38) {
                //Decrement the focusItem index.
                focusItem--;
                makeActive(autocompleteList);
            }
            //If the ENTER key is pressed.
            else if (e.keyCode == 13) {
                //Prevent the form from being submitted.
                e.preventDefault();

                //If the focusItem index is greater than -1.
                if (focusItem > -1) {
                    //Execute the click event of the selected search result.
                    if (autocompleteList) autocompleteList[focusItem].click();
                }
            }
        });

        //FUNCTION SUMMARY:
        //This function is used to classify an item as "active" in the search results.
        function makeActive(searchItem) {

            //If no search results are returned, return false.
            if (!searchItem) return false;

            //Call the makeInactive function to remove the "active" class from all search results.
            makeInactive(searchItem);

            //If the focusItem index is greater than the number of search results, set the focusItem index to 0.
            if (focusItem >= searchItem.length) focusItem = 0;

            //If the focusItem index is less than 0, set the focusItem index to the number of search results.
            if (focusItem < 0) focusItem = (searchItem.length - 1);

            //Add the "active" class to the search result the user is currently focused.
            searchItem[focusItem].classList.add("autocomplete-active");
        }

        //FUNCTION SUMMARY:
        //This function is used to remove the "active" class from all search results.
        function makeInactive(searchItem) {

            //Loop through the search results and remove the "active" class.
            for (var i = 0; i < searchItem.length; i++) {
                searchItem[i].classList.remove("autocomplete-active");
            }
        }

        //FUNCTION SUMMARY:
        //This function is used to close any previous search results.
        function closePrevSearchResults(outerDivElement) {

            //Get the search results list control.
            var autocompleteList = document.getElementsByClassName("autocomplete-items");

            //Loop through the search results and remove the search results.
            for (var i = 0; i < autocompleteList.length; i++) {
                if (outerDivElement != autocompleteList[i] && outerDivElement != searchControl) {
                    autocompleteList[i].parentNode.removeChild(autocompleteList[i]);
                }
            }
        }

        //Add event listener to detect when the user clicks outside of the search results to close the search results.
        document.addEventListener("click", function (e) {
            closePrevSearchResults(e.target);
        });
    }
</script>